public class ContactDetailController {
    @AuraEnabled
    public static List<Contact> getAllContacts(){
        return [Select Id,Name ,Phone,Email,AccountId from Contact] ; 
    }
    @AuraEnabled
    public static void updateContact(List<Contact> con){
        update con;
    }
    @AuraEnabled
    public static void deleteContact(Contact cont){
        system.debug('inside delete');
        delete  cont;
    }
    @AuraEnabled
    public static List<Contact> findByName(String searchKey) {
        String name =  + searchKey + '%';
        return [SELECT id, name, phone,Email FROM Contact WHERE name LIKE :name];
    }
}





<aura:component implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,forceCommunity:availableForAllPageTypes,force:lightningQuickAction" access="global" controller="ContactDetailController">
    <aura:attribute name="data" type="Object"/>
    <aura:attribute name="columns" type="List"/>
    <lightning:card variant="Narrow" title="Contact List" iconName="standard:contact" >
        <aura:set attribute="actions">
            <lightning:button label="New" onclick="{! c.handleClick }"/>
            {!v.data}
            {!v.columns}
        </aura:set>
    </lightning:card>
    <lightning:spinner variant="brand" size="large" aura:id="Id_spinner" class="slds-hide" />
    <aura:handler name="init" value="{!this }" action="{! c.init }"/>
    <lightning:input type="text" name="searchKey"  aura:id="searchKey" onchange="{!c.searchKeyChange}" placeholder="Search" /><br></br>
    <div style="height:1000">
        <lightning:datatable
                             columns="{! v.columns }"
                             data="{! v.data }"
                             keyField="id"
                             onrowaction="{! c.handleRowAction }"/>
    </div>
</aura:component>



({
    init: function (cmp, event, helper) {
        var actions = [
            { label: 'Show details', name: 'show_details' },
            { label: 'Edit', name: 'edit' },
            { label: 'Delete', name: 'delete' }
        ],
        fetchData = {
                name : 'company.companyName',
                author: 'name.findName',
                published : 'address.state'
            };
        cmp.set('v.columns', [
            { label: 'Name', fieldName: 'Name', type: 'text' },
            { label: 'Phone', fieldName: 'Phone', type: 'Number' },
            { label: 'Email', fieldName: 'Email', type: 'url' },
            { label: 'Account Name', fieldName: 'AccountId', type: 'url' },
            { type: 'action', typeAttributes: { rowActions: actions } }
        ]);
        helper.fetchData(cmp, fetchData, 20);
    },
    searchKeyChange: function(component, event) {
        var searchKey = component.find("searchKey").get("v.value");
        console.log('searchKey:::::'+searchKey);
        var action = component.get("c.findByName");
        action.setParams({
            "searchKey": searchKey
        });
        action.setCallback(this, function(a) {
            component.set("v.data", a.getReturnValue());
        });
        $A.enqueueAction(action);
    },
    handleClick: function(component, event, helper) {
        var createContact = $A.get("e.force:createRecord");
        createContact.setParams({
            "entityApiName": "Contact",
            "defaultFieldValues": {
                "AccountId": component.get("v.recordId")
            }
        });
        createContact.fire();
    },
    handleRowAction: function (cmp, event, helper) {
        var action = event.getParam('action');
        var row = event.getParam('row');
        switch (action.name) {
            case 'show_details':
                helper.show_detailsRecord(cmp, event);
                break;
            case 'edit':
                helper.editRecord(cmp, event);
                break;
            case 'delete':
                helper.deleteRecord(cmp, event);
                break;
        }
    }
});




({
    fetchData : function(cmp) {
        var action = cmp.get('c.getAllContacts');
        action.setCallback(this, $A.getCallback(function (response) {
            var state = response.getState();
            if (state === "SUCCESS") {
                cmp.set('v.data', response.getReturnValue());
            } else if (state === "ERROR") {
                var errors = response.getError();
                console.error(errors);
            }
        }));
        $A.enqueueAction(action);
    },
    show_detailsRecord : function(component, event) {
        var row = event.getParam('row');
        var recordId = row.Id;
        var navEvt = $A.get("event.force:navigateToSObject");
        navEvt.setParams({
            "recordId": recordId,
            "slideDevName": "Details"
        });
        navEvt.fire();
    },
    deleteRecord : function(component, event) {
        var action = event.getParam('action');
        var row = event.getParam('row');
        var action = component.get("c.deleteContact");
        action.setParams({
            "cont": row
        });
        action.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS" ) {
                var rows = component.get('v.data');
                var rowIndex = rows.indexOf(row);
                rows.splice(rowIndex, 1);
                component.set('v.data', rows);
                /*  var toastEvent = $A.get("e.force:showToast");
                toastEvent.setParams({
                    "type":"Success",
                    "title": "Success!",
                    "message": "The record has been delete successfully."
                });
                toastEvent.fire();*/
            }
        });    
        $A.enqueueAction(action);
    },
    editRecord : function(component, event) {
        var row = event.getParam('row');
        var action =event.getParam('action');
        var recordId = row.Id;
        var editRecordEvent = $A.get("e.force:editRecord");
        editRecordEvent.setParams({
            "recordId": recordId,
        });
        editRecordEvent.fire();
    }
});